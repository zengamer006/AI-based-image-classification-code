# -*- coding: utf-8 -*-
"""IP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s7yq1xvzOtjJlGCxIcA9Xz54I8G3vJT5
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2
import absl.logging
absl.logging.set_verbosity(absl.logging.ERROR)

from keras.layers import Dense, Flatten
from keras.models import Model
from keras.applications.inception_v3 import InceptionV3, preprocess_input
from keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
import keras

model=InceptionV3(input_shape=(256,256,3),include_top=False)

for layer in model.layers:
  layer.trainable=False

a=Flatten()(model.output)
a=Dense(units=2,activation='sigmoid')(a)
fin_mod= Model(model.input,a)
fin_mod.compile(optimizer='adam',loss=keras.losses.binary_crossentropy,metrics=['accuracy'])
fin_mod.summary()

train_data_gen=ImageDataGenerator(featurewise_center=True, 
                                  rotation_range=0.4, 
                                  width_shift_range=0.3,
                                  horizontal_flip=True,
                                  preprocessing_function= preprocess_input,
                                  zoom_range=0.4,
                                  shear_range=0.4)
train_data=train_data_gen.flow_from_directory(directory="/content/drive/MyDrive/set",target_size=(256,256),batch_size=50)

train_data.class_indices

t_img,label=train_data.next()

t_img.shape

def plotImages(img_arr,label):
  for ind,img in enumerate(img_arr):
    if ind<=10:
      plt.figure(figsize=(5,5))
      plt.imshow(img)
      plt.title(img.shape)
      plt.axis=False
      plt.show()

plotImages(t_img,label)

from keras.callbacks import ModelCheckpoint, EarlyStopping
mc=ModelCheckpoint(filepath="/content/drive/MyDrive/best_model",
                   monitor="accuracy",
                   verbose=1,
                   save_best_only=True)
es=EarlyStopping(monitor="accuracy",min_delta=0.01,patience=5,verbose=1)
cb=[mc,es]

his=fin_mod.fit_generator(train_data, steps_per_epoch=10,epochs=50,callbacks=cb)

from keras.models import load_model
fin_mod=load_model("/content/drive/MyDrive/best_model")

h=his.history
h.keys()

plt.plot(h['loss'])
plt.plot(h['accuracy'],'go--',c="red")
plt.title("Loss vs Accuracy")
plt.show()

path="/content/drive/MyDrive/test/1.jpg"
test=tf.keras.utils.load_img(path,target_size=(256,256))
i=tf.keras.utils.img_to_array(test)
i=preprocess_input(i)
input_arr=np.array([i])
input_arr.shape
out=np.argmax(fin_mod.predict(input_arr))
if out==0:
  print("harmful")
else:
  print("harmless")

plt.imshow(input_arr[0])
plt.title("Input Image")
plt.show()

